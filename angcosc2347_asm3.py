# -*- coding: utf-8 -*-
"""ANGCOSC2347_ASM3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QRJ4k7cX-2CIJ8DtAXPAEIAhGmYUXG7J

# Person Class
"""

class Person:
  def __init__(self, ssn, name, address=None):
    '''
    Constructor of Person class
    Input:
      ssn: string, social security number (must be not None or empty)
      name: string, name of the person and must have at least two words
      address: string, address of the person and is None if not set
    '''
    # Use assert to check ssn that cannot be None or empty, error message is: "ssn cannot be None or empty"
    assert ssn is not None and ssn.strip() != "", "ssn cannot be None or empty"
    # Use assert to check name that cannot be None and has at least two words, error message is: "name must have at least two words"
    assert name is not None and len(name.split()) >= 2, "name must have at least two words"
    # Assign all the values to corresponding data members (if asserts passed)
    self.ssn = ssn
    self.name = name
    self.address = address


  def get_name(self):
    return self.name

  def set_name(self, name):
    # Only set names if it has at least two parts (use split function to split by a space and check the length)
    # Otherwise, print a message: "Warning: The name must have at least two words, the new name was not set." and do not set the name
    parts = name.split(" ")
    if len(parts) >= 2:
        self.name = name
    else:
        print("Warning: The name must have at least two words, the new name was not set.")


  def get_address(self):
    # If the address is None or empty, return "No address specified"
    # Otherwise, return the address
    if self.address is None or self.address.strip() == "":
        return "No address specified"
    return self.address

  def set_address(self, address):
    # Only set address if it is not None or empty
    # Otherwise, print a message "Warning: Address cannot be None or empty, the new address was not set." and do not set the address
    if address is not None and address.strip() != "":
        self.address = address
    else:
        print("Warning: Address cannot be None or empty, the new address was not set.")

  def __str__(self):
    '''
    Return the person information with "Name: <name>, Address: <address>"
    '''
    # Note: if address is None or empty it should be displayed as "No address specified" (use the getter here)
    name = self.get_name()
    address = self.get_address()
    return f"Name: {name}, Address: {address}"

# Test case 1 (5 points)
try:
  p1 = Person(ssn='', name="John Smith", address="Texas, USA")
except AssertionError as e:
  print(f'AssertionError: {e}')

"""Test case 1 should give: AssertionError: ssn cannot be None or empty"""

# Test case 2 (5 points)
try:
  p1 = Person(ssn='ssn', name="John", address="Address")
except AssertionError as e:
  print(f'AssertionError: {e}')

"""Test case 2 should give: AssertionError: name must have at least two words"""

# Test case 3 (5 points)
p1 = Person(ssn='ssn', name="John Smith")
print(p1)

"""Test case 3 should give: Name: John Smith, Address: No address specified"""

# Test case 4 (5 points)
p1 = Person(ssn='ssn', name="John Smith", address="Texas, USA")
print(p1)

"""Test case 4 should give: Name: John Smith, Address: Texas, USA"""

# Test case 5 (5 points)
p1 = Person(ssn='ssn', name="John Smith")
p1.set_address("")
print(p1)

"""Test case 5 should give:

Warning: Address cannot be None or empty, the new address was not set.<br/>
Name: John Smith, Address: No address specified
"""

# Test case 6 (5 points)
p1 = Person(ssn='ssn', name="John Smith")
p1.set_name("John")
print(p1)

"""Test case 6 should give

Warning: The name must have at least two words, the new name was not set.<br/>
Name: John Smith, Address: No address specified

# Employee
"""

class Employee(Person):
  emp_counter = 0
  def __init__(self, ssn, name, address=None, salary=0):
    # Use super to assign ssn, name, address
    # Use assert to check salary must >= 0, error message is "Salary must be positive"
    # Increase employee counter and assign it to emp_number of this object
    super().__init__(ssn, name, address)
    assert salary >= 0, "Salary must be positive"
    Employee.emp_counter += 1
    self.emp_number = Employee.emp_counter
    self.salary = salary

  def get_salary(self):
    return self.salary

  def set_salary(self, salary):
    # If salary < 0 then display a warning message "Warning: salary cannot be negative, the new salary was not set." and do not set the new salary
    # Otherwise, set the salary
    if salary < 0:
        print("Warning: salary cannot be negative, the new salary was not set.")
    else:
        self.salary = salary

  def __str__(self):
    # Get the information as the person (use super() and call to __str__ method to get this)
    # Additionally, add ", Employee number <emp_number>, Monthly salary: <salary>" to the end of the person display
    person_info = super().__str__()
    return f"{person_info}, Employee number {self.emp_number}, Monthly salary: {self.salary}"

  def pay(self):
    '''
    Display a message "Paid: + <the __str__ method of this employee>."
     '''
    print(f"Paid: {self.__str__()}.")

# Test case 7 (5 points)
e1 = Employee("1", "John Smith", "Texas, USA", 10)
print(e1)
e1.pay()

"""Test case 7 should give:

Name: John Smith, Address: Texas, USA, Employee number 1, Monthly salary: 10<br/>
Paid: Name: John Smith, Address: Texas, USA, Employee number 1, Monthly salary: 10.
"""

# Test case 8 (5 points)
e1 = Employee("1", "William Pham", "Texas, USA", 10)
e1.set_salary(-1)
print(e1)

"""Test case 8 should give (given that test case 7 was executed and passed):

Warning: salary cannot be negative, the new salary was not set.<br/>
Name: William Pham, Address: Texas, USA, Employee number 2, Monthly salary: 10.

# Part-time Employee
"""

class PartTimeEmployee(Employee):
  def __init__(self, ssn, name, address=None, salary=0):
    # Use super to assign ssn, name, address, salary, and also increase and set the employee counter and number
    super().__init__(ssn, name, address, salary)

  def __str__(self):
    # Get the information as the person. Hint: To call to __str__ method of Person you use this Person.__str__(self)
    # Additionally, add ", Employee number <emp_number>, Hourly wage: <salary>" to the end of the person display
    person_info = super().__str__()
    return f"{person_info}, Employee number {self.emp_number}, Hourly wage: {self.salary}"


  def pay(self):
    # Ask to input the worked hours (float type, and the prompt message is "Please input worked hours: ")
    # If the users input an invalid value (not a positive number), display a message "Salary must be a positive number, did not pay any to {this employee __str__ method}". Hint: Use try/except and assert.
    # Compute the paying amount (worked hours * salary)
    # Display a message "Paid {amount}: + <the __str__ method of this employee> for {worked hours}."
    try:
        worked_hours = float(input("Please input worked hours: "))
        assert worked_hours > 0, "Salary must be a positive number"
        amount = worked_hours * self.salary
        print(f"Paid {amount}: {self.__str__()} for {worked_hours} hours.")
    except:
        print(f"Salary must be a positive number, did not pay any to {self.__str__()}.")

# Test case 9 (5 points), please input 11 as the prompt for worked hours
pt1 = PartTimeEmployee("ssn2", "Black Smith", "Texas, USA", 1)
pt1.pay()

"""Test case 9 should give:

Please input worked hours: 11 <br/>
Paid 11.0: Name: Black Smith, Address: Texas, USA, Employee number 4, Hourly wage: 1. for 11.0
"""

# Test case 10 (5 points), please input -1 as the prompt for worked hours
pt1 = PartTimeEmployee("ssn3", "Joe Smith", "Texas, USA", 1)
pt1.pay()

"""Test case 10 should give:

Please input worked hours: -1<br/>
Salary must be a positive number, did not pay any to Name: Joe Smith, Address: Texas, USA, Employee number 5, Hourly wage: 1.

"""

